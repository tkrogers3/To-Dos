{"version":3,"sources":["Title.js","Clear.js","App.js","serviceWorker.js","index.js"],"names":["Title","className","Clear","props","handleClick","bind","e","this","parentFunction","type","onClick","React","Component","TodoApp","state","items","text","view","handleChange","handleSubmit","handleCheck","updateView","newList","JSON","parse","window","localStorage","getItem","setState","console","log","setItem","stringify","newView","target","id","filter","item","checked","clear","onSubmit","onChange","value","placeholder","length","itemChecked","map","Number","preventDefault","newItem","Date","now","concat","TodoList","key","aria-label","disabled","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPAceA,MAZf,WACI,OACI,6BACA,yBAAKC,UAAU,uBAEX,6CCkBGC,E,kDAtBf,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,YAAa,EAAKA,YAAYC,KAAjB,gBAFH,E,wDAOPC,GACRC,KAAKJ,MAAMK,mB,+BAIX,OAGQ,yBAAKP,UAAU,wCACf,4BAAQQ,KAAK,UAAUC,QAASH,KAAKH,YAAaH,UAAU,8CAA5D,c,GAjBQU,IAAMC,WCIpBC,E,kDACJ,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IACDW,MAAQ,CACXC,MAAO,GACPC,KAAM,GACNC,KAAM,WAIR,EAAKC,aAAe,EAAKA,aAAab,KAAlB,gBACpB,EAAKc,aAAe,EAAKA,aAAad,KAAlB,gBACpB,EAAKe,YAAc,EAAKA,YAAYf,KAAjB,gBACnB,EAAKgB,WAAa,EAAKA,WAAWhB,KAAhB,gBAZD,E,gEAuBjB,IAAIiB,EAAUC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,YAAc,GAEnEpB,KAAKqB,SACH,CACEb,MAAOO,IAIXO,QAAQC,IAAI,6B,2CAMZL,OAAOC,aAAaK,QAAQ,SAAUR,KAAKS,UAAUzB,KAAKO,MAAMC,QAEhEc,QAAQC,IAAI,8B,iCAIHxB,GAIT,IAAI2B,EAAU1B,KAAKO,MAAMG,KACL,QAAhBX,EAAE4B,OAAOC,GACXF,EAAU,MAEa,SAAhB3B,EAAE4B,OAAOC,GAChBF,EAAU,OAEa,YAAhB3B,EAAE4B,OAAOC,KAChBF,EAAU,WAGZ1B,KAAKqB,SAAS,CACZX,KAAMgB,M,+BAOR,IAAIA,EAAU1B,KAAKO,MAAMC,MAWzB,MATwB,YAApBR,KAAKO,MAAMG,KACbgB,EAAU1B,KAAKO,MAAMC,MAAMqB,QAAO,SAAAC,GAAI,OAAqB,IAAjBA,EAAKC,WAClB,SAApB/B,KAAKO,MAAMG,KACpBgB,EAAU1B,KAAKO,MAAMC,MAAMqB,QAAO,SAAAC,GAAI,OAAqB,IAAjBA,EAAKC,WAClB,QAApB/B,KAAKO,MAAMG,OACpBgB,EAAU1B,KAAKO,MAAMC,OAKrB,6BACE,yBAAKd,UAAU,sBACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,8BACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOO,eAAgBD,KAAKgC,MAAMlC,KAAKE,QACvC,kBAAC,EAAD,CAAUQ,MAAOkB,EACfb,YAAab,KAAKa,cAGpB,0BAAMoB,SAAUjC,KAAKY,cACnB,2BAAOlB,UAAU,mBACfQ,KAAK,OACLgC,SAAUlC,KAAKW,aACfwB,MAAOnC,KAAKO,MAAME,KAClB2B,YAAY,qBAGd,yBAAK1C,UAAU,qDACb,4BAAQA,UAAU,oDAAlB,aACaM,KAAKO,MAAMC,MAAM6B,OAAS,GAEvC,8BACA,4BAAQnC,KAAK,SAAS0B,GAAG,UAAUzB,QAASH,KAAKc,WAAYpB,UAAU,uBAAvE,WACA,4BAAQQ,KAAK,SAAS0B,GAAG,MAAMzB,QAASH,KAAKc,WAAYpB,UAAU,yBAAnE,aACA,4BAAQQ,KAAK,SAAS0B,GAAG,OAAOzB,QAASH,KAAKc,WAAYpB,UAAU,uBAApE,qB,mCAWHK,GACXC,KAAKqB,SAAS,CAAEZ,KAAMV,EAAE4B,OAAOQ,U,kCAKrBpC,GAGV,IAAIuC,EAActC,KAAKO,MAAMC,MAAM+B,KAAI,SAACT,GAKtC,OAJIU,OAAOzC,EAAE4B,OAAOC,MAAQE,EAAKF,KAE/BE,EAAKC,QAAUhC,EAAE4B,OAAOI,SAEnBD,KAIT9B,KAAKqB,SAAS,CACZb,MAAO8B,M,mCAKEvC,GAAI,IAAD,OAEd,GADAA,EAAE0C,iBAC6B,IAA3BzC,KAAKO,MAAME,KAAK4B,OAApB,CAGA,IAAMK,EAAU,CACdjC,KAAMT,KAAKO,MAAME,KACjBmB,GAAIe,KAAKC,MACTb,SAAS,GAGX/B,KAAKqB,UAAU,SAAAd,GAAK,MAAK,CACvBC,MAAOD,EAAMC,MAAMqC,OAAOH,GAC1BjC,KAAM,OAEJ,kBAAMa,QAAQC,IAAI,OAAQ,EAAKhB,a,8BAMnCP,KAAKqB,SAAS,CACZb,MAAO,S,GAjKSJ,IAAMC,WAyKtByC,E,uKAEM,IAAD,OAEP,OACE,6BAEG9C,KAAKJ,MAAMY,MAAM+B,KAAI,SAAAT,GAAI,OAExB,yBAAKiB,IAAKjB,EAAKF,GAAIlC,UAAU,oBAC3B,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,mBAAmBkC,GAAG,YACnC,2BAAO1B,KAAK,WAAW6B,QAASD,EAAKC,QAASH,GAAIE,EAAKF,GAAIM,SAAU,EAAKtC,MAAMiB,YAAanB,UAAU,aAAasD,aAAW,wCAGnI,2BAAO9C,KAAK,OAAOiC,MAAOL,EAAKrB,KAAMmB,GAAG,WAAWqB,UAAQ,EAACvD,UAAU,eAAesD,aAAW,6BAChG,yBAAKtD,UAAU,sBACb,0BAAMA,UAAU,kBAAhB,oB,GAjBSU,IAAMC,WA4BdC,I,MC/LK4C,QACW,cAA7BhC,OAAOiC,SAASC,UAEe,UAA7BlC,OAAOiC,SAASC,UAEhBlC,OAAOiC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MAAYC,SAASC,eAAe,SD2HhC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.59a3f468.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Title() {\n    return (\n        <div>\n        <div className=\"col-12 text-center \">\n\n            <h1>To-Do List</h1>\n        </div>\n        </div>\n    )\n\n}\n\nexport default Title;","import React from 'react';\n\nclass Clear extends React.Component {\nconstructor(props) { \n    super(props);\n    this.handleClick= this.handleClick.bind(this);\n\n\n}\n\nhandleClick(e){\n    this.props.parentFunction()\n}\n\nrender () {\n    return(\n    \n        \n            <div className=\"row mx-auto pb-3 justify-content-end\">\n            <button type=\"button \" onClick={this.handleClick} className=\"btn bg-danger font-weight-bold text-white \">Clear</button>\n        </div>\n    )\n}\n}\n\nexport default Clear ","import React from 'react';\nimport './App.css';\nimport Title from './Title';\nimport Clear from './Clear';\n\n\nclass TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n      text: '',\n      view: 'current'\n\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleCheck = this.handleCheck.bind(this);\n    this.updateView = this.updateView.bind(this)\n\n  }\n\n\n  componentDidMount() { // newList - local storage stores new item\n    //get the items from Local Storage- if items are not null and not undefined, JSON.parse\n    //then pass the data to the new list.\n    //If there is no data, assign an empty array.\n    //setState items to the new list\n    //Was this an issue due to this.localStorage instead of window.localStorage? Array is clear and no issues.\n    let newList = JSON.parse(window.localStorage.getItem('lsList')) || [];\n\n    this.setState(\n      {\n        items: newList //Original items array is now newList\n      }\n    );\n\n    console.log(\"the component did mount\")\n\n  }\n\n  componentDidUpdate() {  //take new items and stringify them to be stored in new array\n\n    window.localStorage.setItem('lsList', JSON.stringify(this.state.items));\n\n    console.log(\"the component did update\")\n  }\n\n\n  updateView(e) {\n    //create a new variable that = to state view\n    // if event target id = button id, set newView to button id.\n    // set state to the current to the view targeted by button\n    let newView = this.state.view;\n    if (e.target.id === \"all\") {\n      newView = \"all\"\n    }\n    else if (e.target.id === \"done\") {\n      newView = \"done\"\n    }\n    else if (e.target.id === \"current\") {\n      newView = \"current\"\n    }\n\n    this.setState({\n      view: newView,\n    });\n  }\n\n\n  render() {\n\n    let newView = this.state.items;\n\n    if (this.state.view === \"current\") {\n      newView = this.state.items.filter(item => item.checked === false);\n    } else if (this.state.view === \"done\") {\n      newView = this.state.items.filter(item => item.checked === true);\n    } else if (this.state.view === \"all\") {\n      newView = this.state.items;\n    }\n\n\n    return (\n      <div>\n        <div className=\" container mX-auto\">\n          <div className=\"container mt-5\">\n            <div className=\"container main mx-auto p-5\">\n              <Title />\n              <Clear parentFunction={this.clear.bind(this)} />\n              <TodoList items={newView}\n                handleCheck={this.handleCheck}\n              //updateView\n              />\n              <form onSubmit={this.handleSubmit}>\n                <input className=\"input-group mb-3\"\n                  type=\"text\"\n                  onChange={this.handleChange}\n                  value={this.state.text}\n                  placeholder=\"Enter a new item\"\n                />\n\n                <div className=\"input-group-append mx-auto justify-content-center\">\n                  <button className=\"bg-secondary text-white m-1 justify-content-left\">\n                    Add Task #{this.state.items.length + 1}\n                  </button>\n                  <div></div>\n                  <button type=\"button\" id=\"current\" onClick={this.updateView} className=\"btn btn-primary m-1\">To-Do's</button>\n                  <button type=\"button\" id=\"all\" onClick={this.updateView} className=\"btn btn-secondary m-1\">All Items</button>\n                  <button type=\"button\" id=\"done\" onClick={this.updateView} className=\"btn btn-success m-1\">Completed</button>\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n\n  }\n\n  ////Handle check with (event.target)\n  handleCheck(e) {\n    /*create variable (itemChecked)= map through item array looking at\n  each object to change item if  id equals e.target.id*/\n    let itemChecked = this.state.items.map((item) => {\n      if (Number(e.target.id) === item.id) {\n        // update items checked status.\n        item.checked = e.target.checked\n      }\n      return item;\n    });\n\n    //update the state- map returns new array.\n    this.setState({\n      items: itemChecked\n    })\n  }\n\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.text.length === 0) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now(),\n      checked: false,\n      // this.setState\n    };\n    this.setState((state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }\n    )), () => console.log(\"This\", this.state)\n    )\n\n  }\n\n  clear() {\n    this.setState({\n      items: []\n    });\n\n  }\n\n}\n\n\nclass TodoList extends React.Component {\n\n  render() {\n\n    return (\n      <div>\n\n        {this.props.items.map(item => (\n\n          <div key={item.id} className=\"input-group mb-3\">\n            <div className=\"input-group-prepend\" >\n              <div className=\"input-group-text\" id=\"checking\">\n                <input type=\"checkbox\" checked={item.checked} id={item.id} onChange={this.props.handleCheck} className=\"inputWhite\" aria-label=\"Checkbox for following text input\" />\n              </div>\n            </div>\n            <input type=\"text\" value={item.text} id=\"disabled\" disabled className=\"form-control\" aria-label=\"Text input with checkbox\" />\n            <div className=\"input-group-append\">\n              <span className=\"btn btn-danger\">Delete</span>\n            </div>\n          </div>\n\n        ))}\n      </div>\n    );\n  }\n\n}\n\nexport default TodoApp;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoApp from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <TodoApp />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}